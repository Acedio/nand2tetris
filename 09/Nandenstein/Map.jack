class Map {
  // multi-dimension array ([row][column]) because multiplication is expensive
  field Array map;
  // LUT for delta distance values
  field Array dd_lut;
  // LUT for angle changes between x screen columns
  field Array x_angle_lut_hi;
  field Array x_angle_lut_lo;
  // LUT for cosine
  field Array cos_lut;

  field int delta_dist_x, delta_dist_y;
  field int side_dist_x, side_dist_y;

  field int w, h;

  constructor Map new(int Width, int Height) {
    var int row, col;
    var Array cur_row;
    let w = Width;
    let h = Height;

    let map = Array.new(h);
    let row = 0;
    while (row < h) {
      let map[row] = Array.new(w);
      let cur_row = map[row];

      let col = 0;
      while (col < w) {
        if (((col = row) & (col & 1)) | (col = 0) | (row = 0) | (col = (w - 1)) | (row = (h - 1))) {
          let cur_row[col] = 1;
        } else {
          let cur_row[col] = 0;
        }
        let col = col + 1;
      }
      let row = row + 1;
    }

    let cur_row = map[0];
    let cur_row[4] = 3;  // mirror
    let cur_row[5] = 3;  // mirror
    let cur_row = map[3];
    let cur_row[3] = 2;  // exit

    let dd_lut = Array.new(256);
    do Luts.init_delta_dist(dd_lut);

    let x_angle_lut_hi = Array.new(32);
    let x_angle_lut_lo = Array.new(32);
    do Luts.init_x_angle(x_angle_lut_hi, x_angle_lut_lo);

    let cos_lut = Array.new(256);
    do Luts.init_cos(cos_lut);

    return this;
  }

  method void dispose() {
    do map.dispose();
    do dd_lut.dispose();
    do x_angle_lut_hi.dispose();
    do x_angle_lut_lo.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method int at(int x, int y) {
    var Array cur_row;
    let cur_row = map[y];
    return cur_row[x];
  }

  method void print() {
    var int row, col;
    var Array cur_row;

    let row = 0;
    while (row < h) {
      let cur_row = map[row];

      let col = 0;
      while (col < w) {
        do Output.printInt(cur_row[col]);
        do Output.printChar(20);

        let col = col + 1;
      }
      do Output.println();
      let row = row + 1;
    }

    return;
  }

  method void update_pos(Fixed pos_x, Fixed pos_y, int dir) {
    var Array cur_row;
    do pos_x.Add(0, cos_lut[dir]);
    do pos_y.Add(0, cos_lut[(dir + 64)&255]);
    let cur_row = map[pos_y[0]];
    if (cur_row[pos_x[0]]) {
      // if collision, undo
      do pos_x.Add(0, -cos_lut[dir]);
      do pos_y.Add(0, -cos_lut[(dir + 64)&255]);
    }

    return;
  }

  // 0 <= dir < 256
  // dists.len = 32
  method void trace_screen(Fixed pos_x, Fixed pos_y, Fixed camera_dir, Array dists, Array wall_types, Array exit_dists) {
    var Fixed theta;
    var int screen_x;
    // copy camera_dir so we don't screw it up
    // the -32 here assumes a 90 degree FOV
    let theta = Fixed.new(camera_dir[0] - 32, camera_dir[1]);
    // using [0] for .hi and [1] for .lo saves us some slow function calls
    if (theta[0] < 0) {
      let theta[0] = theta[0] + 256;
    }
    let screen_x = 31;
    while (screen_x > -1) {
      // Increment the angle
      do theta.Add(x_angle_lut_hi[screen_x], x_angle_lut_lo[screen_x]);
      if (theta[0] > 255) {
        let theta[0] = theta[0] - 256;
      }
      do trace(pos_x, pos_y, theta, dists + screen_x, wall_types + screen_x, exit_dists + screen_x);
      let screen_x = screen_x - 1;
    }
    do theta.dispose();
    return;
  }

  method int tb_mul(int top, int bot) {
    var int mask;
    var int sum;
    
    let mask = 256;

    while (mask > 0) {
      if (mask & top) {
        let sum = sum + bot;
      }
      let bot = bot + bot;
      let mask = mask + mask;
    }

    return sum;
  }

  method void trace(Fixed pos_x, Fixed pos_y, Fixed dir, int dist, int wall_type, int exit_dist) {
    var boolean hit;
    var boolean side;
    var Array cur_row;
    var int tile_val;
    var int map_x, map_y;
    var int step_x, step_y;
    var int dir_x, dir_y;  // dir_y is just dir_x rotated 90 degrees
    var int dist_shift;
    var int bitmask, addend;

    // initial exit_dist is negative to indicate it shouldn't be used
    let exit_dist[0] = -1;
    let hit = false;

    let map_x = pos_x[0];
    let map_y = pos_y[0];

    let dir_x = dir[0];
    let dir_y = (dir[0] - 64) & 255;

    let delta_dist_x = dd_lut[dir_x];
    let delta_dist_y = dd_lut[dir_y];
    
    if ((dir[0] < 64) | (dir[0] > 192)) {
      let step_x = 1;
      // have already traveled a fraction of the way towards the next x
      let side_dist_x = tb_mul(delta_dist_x, 255 - pos_x[1]);
    } else {
      let step_x = -1;
      let side_dist_x = tb_mul(delta_dist_x, pos_x[1]);
    }
    if (dir[0] > 128) {
      let step_y = 1;
      let side_dist_y = tb_mul(delta_dist_y, 255 - pos_y[1]);
    } else {
      let step_y = -1;
      let side_dist_y = tb_mul(delta_dist_y, pos_y[1]);
    }

    while (~hit) {
      if (side_dist_x < side_dist_y) {
        let side_dist_x = side_dist_x + delta_dist_x;
        let map_x = map_x + step_x;
        let side = true;
        if (side_dist_x > 8160) {
          // 8160 is the max our distance to height converter can handle, so exit
          let dist[0] = 8160;
          let wall_type[0] = 0;
        }
      } else {
        let side_dist_y = side_dist_y + delta_dist_y;
        let map_y = map_y + step_y;
        let side = false;
        if (side_dist_y > 8160) {
          // 8160 is the max our distance to height converter can handle, so exit
          let dist[0] = 8160;
          let wall_type[0] = 0;
        }
      }
      let cur_row = map[map_y];
      let tile_val = cur_row[map_x];
      if (tile_val) {
        if (tile_val = 1) {
          // wall
          let hit = true;
        }
        if (tile_val = 2) {
          // exit
          if (side) {
            // we overstepped by delta_dist, so need to correct
            let exit_dist[0] = side_dist_x - delta_dist_x;
          } else {
            let exit_dist[0] = side_dist_y - delta_dist_y;
          }
        }
        if (tile_val = 3) {
          // mirror
          if (side) {
            // invert x
            let step_x = -step_x;
            let map_x = map_x + step_x;
          } else {
            // invert y
            let step_y = -step_y;
            let map_y = map_y + step_y;
          }
        }
      }
    }

    if (side) {
      // we overstepped by delta_dist, so need to correct
      let dist[0] = side_dist_x - delta_dist_x;
      let wall_type[0] = 1;
    } else {
      let dist[0] = side_dist_y - delta_dist_y;
      let wall_type[0] = 0;
    }

    return;
  }
}

// vim: set cindent:
