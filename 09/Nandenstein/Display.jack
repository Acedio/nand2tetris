class Display {
  // I'll use the term "pixrow" a lot here. Our display is actually a 32x256 block of words.
  // Each word, or pixrow, actually stores 16 pixels.

  // values are distance of the wall from the top of the screen. 0 = all wall, 128 = no wall
  field Array last_frame;
  field Array last_frame_color_wall;
  // LUT for height from distance
  field Array height_from_dist_lut;

  // store memory offsets of the (one above) top and bottom filled pixrows for each column
  // so we don't have to recalculate each frame (multiplication x_x)
  // memory address of pixrow above the last filled for each column
  field Array last_frame_mem_top;
  // memory address of last bottom filled pixrow for each column
  field Array last_frame_mem_bot;
  field int w;

  constructor Display new() {
    let w = 32;
    let last_frame = Array.new(w);
    let last_frame_color_wall = Array.new(w);
    let last_frame_mem_top = Array.new(w);
    let last_frame_mem_bot = Array.new(w);

    let height_from_dist_lut = Array.new(256);
    do Luts.init_height_from_dist(height_from_dist_lut);

    do clear();

    return this;
  }

  method void clear() {
    var int col;
    let w = 32;

    let col = 0;
    while (col < w) {
      let last_frame[col] = 128;
      let last_frame_color_wall[col] = 1234;
      // SCREEN = 16384 and is 8192 pixrows total
      let last_frame_mem_top[col] = 16384 + 4096 + col;  // middle of screen so wall off
      let last_frame_mem_bot[col] = 16384 + 4096 + col;  // middle of screen so wall off
      do fill_up(last_frame_mem_top[col], 128, 0);
      // Floor pattern = 21845
      do fill_down(last_frame_mem_bot[col], 128, 21845);
      let col = col + 1;
    }
    return;
  }

  method void dispose() {
    do last_frame.dispose();
    do last_frame_mem_top.dispose();
    do last_frame_mem_bot.dispose();
    do height_from_dist_lut.dispose();
    do Memory.deAlloc(this);
    return;
  }

  // next_frame should have len = w
  method void draw(Array dists, Array wall_types, Array effect_dists, Array effects) {
    var int col;
    
    while (col < w) {
      do draw_col(col, dists[col], wall_types[col], effect_dists[col], effects[col]);

      let col = col + 1;
    }
    return;
  }

  method void draw_col(int col, int dist, int wall_type, int effect_dist, int effect) {
    var int pixrow;  // memory address of the "pixel" that's actually 16 pixels wide
    var int rows;
    var int height;  // actually distance from top of screen
    var int last_height;
    var int invert_height;
    var int last_invert_height;
    var int last_color_wall;
    var int bitmask, addend, dist_shift;
    var int color_wall, color_wall_alt;
    var int color_ceil, color_floor;

    if (wall_type = 0) {
      let color_wall = -1;
      let color_wall_alt = -1;
    } else {
      if (wall_type = 1) {
        let color_wall = 21845;
        let color_wall_alt = -1;
      }
    }
    let color_ceil = 0;
    let color_floor = 21845;

    // first calculate wall height from distance
    let bitmask = 32;
    let addend = 1;
    let dist_shift = 0;

    // shift the distance right 5 bits to fit within the 256 values
    while (addend < 256) {
      if (dist & bitmask) {
        let dist_shift = dist_shift + addend;
      }
      let bitmask = bitmask + bitmask;
      let addend = addend + addend;
    }
    let height = height_from_dist_lut[dist_shift];

    // calculate invert height from distance
    if (~(effect = 0)) {
      let color_wall = ~color_wall;
      let color_wall_alt = ~color_wall_alt;
      /*
      let bitmask = 32;
      let addend = 1;
      let dist_shift = 0;

      // shift the distance right 5 bits to fit within the 256 values
      while (addend < 256) {
        if (effect_dist & bitmask) {
          let dist_shift = dist_shift + addend;
        }
        let bitmask = bitmask + bitmask;
        let addend = addend + addend;
      }
      let invert_height = height_from_dist_lut[dist_shift];
      */
    } else {
      let invert_height = 128;
    }

    let last_height = last_frame[col];
    let last_frame[col] = height;
    let last_color_wall = last_frame_color_wall[col];
    let last_frame_color_wall[col] = color_wall;
    if (height < last_height) {
      // new wall is bigger, draw extra wall
      let rows = last_height - height;
      let pixrow = last_frame_mem_top[col];
      if (color_wall = color_wall_alt) {
        let last_frame_mem_top[col] = fill_up(pixrow, rows, color_wall);
      } else {
        let last_frame_mem_top[col] = fill_up_alt(pixrow, rows, color_wall, color_wall_alt);
      }
      if (~(color_wall = last_color_wall)) {
        if (color_wall = color_wall_alt) {
          do fill_down(pixrow, 256 - (last_height + last_height), color_wall);
        } else {
          do fill_down_alt(pixrow, 256 - (last_height + last_height), color_wall, color_wall_alt);
        }
      }
      let pixrow = last_frame_mem_bot[col];
      if (color_wall = color_wall_alt) {
        let last_frame_mem_bot[col] = fill_down(pixrow, rows, color_wall);
      } else {
        let last_frame_mem_bot[col] = fill_down_alt(pixrow, rows, color_wall, color_wall_alt);
      }
    } else {
      // new wall is smaller, erase extra wall
      let rows = height - last_height;
      let pixrow = last_frame_mem_top[col];
      let last_frame_mem_top[col] = fill_down(pixrow, rows, color_ceil);
      if (~(color_wall = last_color_wall)) {
        if (color_wall = color_wall_alt) {
          do fill_down(last_frame_mem_top[col], 256 - (height + height), color_wall);
        } else {
          do fill_down_alt(last_frame_mem_top[col], 256 - (height + height), color_wall, color_wall_alt);
        }
      }
      let pixrow = last_frame_mem_bot[col];
      let last_frame_mem_bot[col] = fill_up(pixrow, rows, color_floor);
    }
    return;
  }

  // start is the memory address below the first row to be filled
  // returns the last memory address filled
  method int fill_up(int start, int rows, int fill_val) {
    var int row;
    let row = 0;
    while (row < rows) {
      let start = start - 32;  // one row up
      let start[0] = fill_val;  // hooray type safety!
      let row = row + 1;
    }
    return start;
  }

  // Alternates between two given patterns
  method int fill_up_alt(int start, int rows, int fill_val, int alt_fill_val) {
    var int row;
    let row = 0;
    while (row < rows) {
      let start = start - 32;  // one row up
      if (start & 32) {
        let start[0] = fill_val;
      } else {
        let start[0] = alt_fill_val;
      }
      let row = row + 1;
    }
    return start;
  }

  // start is the memory address of the first row to be filled (different from fill_up!)
  // returns the memory address of the pixrow one row below the last filled
  method int fill_down(int start, int rows, int fill_val) {
    var int row;
    let row = 0;
    while (row < rows) {
      let start[0] = fill_val;  // more type safety!
      let start = start + 32; // one row down
      let row = row + 1;
    }
    return start;
  }

  // Alternates between black and the given pattern
  method int fill_down_alt(int start, int rows, int fill_val, int alt_fill_val) {
    var int row;
    let row = 0;
    while (row < rows) {
      if (start & 32) {
        let start[0] = fill_val;
      } else {
        let start[0] = alt_fill_val;
      }
      let start = start + 32; // one row down
      let row = row + 1;
    }
    return start;
  }
}

// vim: set cindent:
